#!/usr/bin/env bash
#######################################################################################
USAGE=$(cat <<-EOM
NAME
        watchrun - A wrapper around "watchman-make ... --run ..."

SYNOPSIS
        watchrun PATTERN [PATTERN ...] [--[no-]initial-run] -- COMMAND [ARGS]

DESCRIPTION
        Wraps "watchman-make ... --run ..." so that the arguments to the
        flag "--run" do not need to be quoted or escaped.

        The call from the SYNOPSIS above, exluding the --initial-run flag, is
            mostly equivalent to the following:

        watchman-make -p PATTERN [PATTERN ...] --run "COMMAND_and_ARGS"

        Differences include:
          * by default, an initial run of COMMAND_and_ARGS is performed
            before invoking watchman-make. This can be disabled with the
            --no-initial-run flag.

OPTIONS
        --initial-run
        --no-initial-run
            This option, enabled by default, triggers an initial run of
            "COMMAND [ ARGS ]" before watchman-make is invoked. A failure of
            the initial run does not prevent subsequent runs.

        --redexit
        --no-redexit
            This option, enabled by default, appends message in red text
            if the command failed.

        --greenexit
        --no-greenexit
            This option, enabled by default, appends message in green text
            if the command succeeded.

EXAMPLES
        watchrun 'scripts/*' '*.yaml' --no-initial-run -- pytest -k 'pytest pattern'
            This should be precisely equivalent to the following:
        watchman-make -p 'scripts/*' '*.yaml' --run "pytest -k 'pytest pattern'"

EOM
)
#######################################################################################

# parse pre-dash args
SEEN_DOUBLE_DASH=false
INITIAL_RUN=true
RED_EXIT=true
GREEN_EXIT=true
PRE_DASH_ARGS=()
while (( $# > 0 )) && [[ $SEEN_DOUBLE_DASH == false ]]; do
    case "$1" in
        --) SEEN_DOUBLE_DASH=true ;;
        --initial-run) INITIAL_RUN=true ;;
        --no-initial-run) INITIAL_RUN=false ;;
        --redexit) RED_EXIT=true ;;
        --no-redexit) RED_EXIT=false ;;
        --greenexit) GREEN_EXIT=true ;;
        --no-greenexit) GREEN_EXIT=false ;;
        *) PRE_DASH_ARGS+=("$1") ;;
    esac
    shift
done

# parse post-dash args
if ! (( $# > 0 )); then
    echo "Error: No post-double-dash arguments found."
    echo "$USAGE"
    exit 1
fi
POST_DASH_ARGS="${1@Q}"  # shell escape
shift
while (( $# > 0 )); do
    POST_DASH_ARGS+=" "
    POST_DASH_ARGS+="${1@Q}"  # shell escape
    shift
done

COMMAND_AND_ARGS="$POST_DASH_ARGS"

# invoke watchman-make
echo "PATTERNS:		${PRE_DASH_ARGS[@]}"
echo "COMMAND_AND_ARGS:	$COMMAND_AND_ARGS"

NC='\033[0m' # No Color
GREEN='\033[32m'
RED='\033[0;31m'
# RED_BG='\033[41m'
# GREEN_BG='\033[42m'
if [[ $GREEN_EXIT == true ]]; then
    GREEN_EXIT_STR=" && echo -e '${GREEN}'\"command $COMMAND_AND_ARGS succeeded \"'${NC}'"
    POST_DASH_ARGS+="$GREEN_EXIT_STR"
fi
if [[ $RED_EXIT == true ]]; then
    RED_EXIT_STR=" || { ret=\$?; echo -e '${RED}'\"command $COMMAND_AND_ARGS failed with exit code \$ret\"'${NC}'; }"
    POST_DASH_ARGS+="$RED_EXIT_STR"
fi

if [[ $INITIAL_RUN == true ]]; then
    echo "Performing initial run"
    eval "$POST_DASH_ARGS"
    echo "Initial run complete."
fi
watchman-make -p "${PRE_DASH_ARGS[@]}" --run "$POST_DASH_ARGS"

# vi: ft=bash
